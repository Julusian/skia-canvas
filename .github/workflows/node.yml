name: Prebuild

on:
  push:
    # tags:
    #   - v*

env:
  NAPI_VERSION: 6
  BINDING_NAME: julusian-skia-canvas

jobs:
  build-and-test:
    name: Build ${{ matrix.arch }} on ${{ matrix.os }} ${{ matrix.libc }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # windows
          - os: windows-latest
            arch: x64
            is-native: true
          - os: windows-latest
            arch: ia32
            is-native: false
          # macos
          - os: macos-11
            arch: arm64
            is-native: false
          - os: macos-11
            arch: x64
            is-native: true
          # linux
          - os: ubuntu-20.04
            arch: x64
            is-native: true
          # linux-libc
          - os: ubuntu-latest
            arch: arm64
            is-native: false
            docker-arch: linux/arm64
            docker-image: node:16-buster
          # - os: ubuntu-latest
          #   arch: arm
          #   is-native: false
          #   docker-arch: linux/arm/v7
          #   docker-image: node:16-buster
          # # linux-musl
          # - os: ubuntu-latest
          #   arch: x64
          #   is-native: false
          #   docker-arch: linux/amd64
          #   docker-image: node:16-alpine
          #   libc: musl

    steps:
      - uses: actions/checkout@v3
      - name: Checkout submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Use Rust
        if: runner.os == 'Windows' || (runner.os == 'macOS' && matrix.arch != 'arm64')
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable

      - name: Use Rust (macOS arm64)
        if: runner.os == 'macOS' && matrix.arch == 'arm64'
        uses: actions-rs/toolchain@v1.0.6
        with:
          target: aarch64-apple-darwin
          toolchain: stable

      - name: Install rust
        if: runner.os == 'Linux'
        shell: bash
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build Windows
        if: runner.os == 'Windows' 
        shell: bash
        run: |
          yarn install --ignore-scripts
          yarn build --release --features "vulkan,window"

      - name: Build macOS (x64)
        if: runner.os == 'macOS' && matrix.arch == 'x64'
        shell: bash
        run: |
          yarn install --ignore-scripts
          yarn build --release --features "metal,window"
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.13

      - name: Build macOS (arm64)
        if: runner.os == 'macOS' && matrix.arch == 'arm64'
        shell: bash
        run: |
          SDK=$(xcodebuild -showsdks -json | jq -r '.[] | .canonicalName' | grep '^macosx' | tail -n 1)
          echo "SDKROOT=$(xcrun -sdk $SDK --show-sdk-path)" >> $GITHUB_ENV

          yarn install --ignore-scripts
          yarn build --release --features "metal,window" --target aarch64-apple-darwin
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.13
  
      - name: Build Linux
        if: runner.os == 'Linux' && !matrix.docker-arch
        shell: bash
        run: |
          yarn install --ignore-scripts
          yarn build --release --features "vulkan,window,skia-safe/embed-freetype"

      - name: Run tests
        if: ${{ matrix.is-native }}
        shell: bash
        run: |
            yarn test

      - name: Copy binary
        if: ${{ !matrix.docker-arch }}
        shell: bash
        run: |
          # yarn build --arch=${{ matrix.arch }}
          yarn pkg-prebuilds-copy --baseDir build/Release --source $BINDING_NAME.node --name=$BINDING_NAME --strip  --napi_version=$NAPI_VERSION --arch=${{ matrix.arch }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: matrix.docker-arch
      - name: rebuild (in docker)
        uses: addnab/docker-run-action@v3
        if: matrix.docker-arch
        with:
          image: ${{ matrix.docker-image }}
          # shell: bash
          options: --platform=${{ matrix.docker-arch }} -v ${{ github.workspace }}:/work -e CI=1 -e npm_config_build_from_source=1 -e NAPI_VERSION -e BINDING_NAME
          run: |
            if command -v apk &> /dev/null
            then
              apk update
              apk add curl
            fi

            # Install rust
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
            . "$HOME/.cargo/env"

            cd /work

            yarn install --ignore-scripts
            yarn build --release --features "vulkan,window,skia-safe/embed-freetype"

            yarn test

            yarn pkg-prebuilds-copy --baseDir build/Release --source $BINDING_NAME.node --name=$BINDING_NAME --strip --napi_version=$NAPI_VERSION --arch=${{ matrix.arch }} --libc=${{ matrix.libc }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}-${{ matrix.libc }}-prebuilds
          path: prebuilds
          retention-days: 1

  bundle:
    name: Bundle prebuilds
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: tmp

      - name: Display structure of downloaded files
        run: |
          mkdir prebuilds
          mv tmp/*/* prebuilds/

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: all-prebuilds
          path: prebuilds
          retention-days: 7